// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/* This is your enclave EDL file, please specify the EDL files you need and ECALLs/OCALLs needed */

enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;

    trusted
    {
        /* ECALLs */
        public sgx_status_t exec_wasm_median_int([in, count=binary_len] const uint8_t* binary_median_int, size_t binary_len, [out] int32_t* result_out_median_int);
        public sgx_status_t exec_wasm_median_float([in, count=binary_len] const uint8_t* binary_median_float, size_t binary_len, [out] float* result_out_median_float);
        public sgx_status_t exec_wasm_mean_int([in, count=binary_len] const uint8_t* binary_mean_int, size_t binary_len, [out] int32_t* result_out_mean_int);
        public sgx_status_t exec_wasm_mean_float([in, count=binary_len] const uint8_t* binary_mean_float, size_t binary_len, [out] float* result_out_mean_float);
        public sgx_status_t exec_wasm_sd_int([in, count=binary_len] const uint8_t* binary_sd_int, size_t binary_len, [out] float* result_out_sd_int);
        public sgx_status_t exec_wasm_sd_float([in, count=binary_len] const uint8_t* binary_sd_float, size_t binary_len, [out] float* result_out_sd_float);
        public sgx_status_t exec_wasm_append([in, count=binary_len] const uint8_t* binary_wasm_append, size_t binary_len, [out] int32_t* result_wasm_append);
    };
    untrusted
    {
        /* OCALLs */
    };
};


